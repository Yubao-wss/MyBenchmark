项目名称：基准测试框架/性能测试框架
	功能：
	1.自动加载测试用例
	2.通过接口标记待测试类
	3.通过注解标记待测试方法
	4.通过注解实现多级配置
	TODO:
	1.生成报表
	2.问题修复
	3.格式问题

------------------------------------------------------------------------------
1.性能测试相关的知识点
	什么是性能测试（基准测试）
	为什么要做性能测试
	可能影响到性能测试的一些因素
2.字符串 + 拼接   vs   StringBuilder拼接
3.框架化
	1.利用Benchmark注解标记出需要测试的方法
	2.利用Measurement注解配置测试的一些相关配置
		三级配置（默认 + 类级别 + 方法）
	3.测试用例（Case）自动发现
		1.如何获取指定包下的所有类 -》如何找到指定目录下所有字节码文件
		2.如何区分哪些类是需要测试的类（接口）

------------------------------------------------------------------------------
语法
定义注解
	@interface Measurement {
   		int iterations() default = 3;（设置一个默认值）
	}

使用注解
	@Measurement(iteartions = 10);
	或者
	@Measurement 等同于 @Measurement() 等同于@Measurement(iteartions = 3)（要改变值必须显式声明）

注解的三个阶段

	编译期间 （变成了 *.class）已经不存在
	编译期间 （变成了 *.class）还存在，但是运行时不存在

	Annotations Processor（注解处理器）
	运行期间 始终存在（保存方法区的类的元信息中）

	Relfection (反射)

注解的使用场景（把代码逻辑转换成配置逻辑）
	修改的代码逻辑的成本一定是高于修改配置的成本
	有些配置和代码是强相关的

------------------------------------------------------------------------------
创建JMH
	$ mvn archetype:generate \
          -DinteractiveMode=false \
          -DarchetypeGroupId=org.openjdk.jmh \
          -DarchetypeArtifactId=jmh-java-benchmark-archetype \
          -DgroupId=org.sample \
          -DartifactId=test \
          -Dversion=1.0
------------------------------------------------------------------------------
Maven:
	1.系统构建工具
	2.阶段
	   清理  clean
	   编译  compile
	   打包  package
	   安装  install